<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #8B47B5, #FED0C5);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
        }

        .chat-container {
            background-color: white;
            width: 350px;
            max-width: 100%;
            border-radius: 20px;
            box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transition: width 0.3s ease;
        }

        .chat-header {
            background: linear-gradient(90deg, #8B47B5, #A65CC6);
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 22px;
            font-weight: 600;
            animation: fadeIn 1s ease;
        }

        .chat-box {
            padding: 15px;
            height: 400px;
            overflow-y: auto;
            border-top: 1px solid #ccc;
            background-color: #f9f9f9;
            display: flex;
            flex-direction: column;
            gap: 10px;
            animation: fadeIn 1.2s ease;
        }

        .chat-box p {
            margin: 0;
            padding: 12px;
            border-radius: 20px;
            max-width: 70%;
            animation: slideUp 0.5s ease;
            font-size: 16px;
        }

        .user-message {
            background-color: #8B47B5;
            color: white;
            align-self: flex-end;
        }

        .bot-message {
            background-color: #FED0C5;
            color: black;
            align-self: flex-start;
        }

        .chat-input {
            display: flex;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 0 0 20px 20px;
        }

        .chat-input input {
            width: 80%;
            padding: 10px;
            border: none;
            border-radius: 10px;
            margin-right: 10px;
            font-size: 16px;
            outline: none;
            transition: all 0.2s ease;
        }

        .chat-input input:focus {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .chat-input button, .chat-input .mic-button {
            background-color: #8B47B5;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.3s ease;
            margin-left: 5px;
        }

        .chat-input button:hover, .chat-input .mic-button:hover {
            background-color: #742E9E;
            transform: scale(1.05);
        }

        .typing-indicator {
            align-self: flex-start;
            display: none;
            font-size: 14px;
            color: gray;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h3>Chatbot</h3>
        </div>
        <div class="chat-box" id="chat-box">
            <!-- Messages will appear here -->
        </div>
        <div class="typing-indicator" id="typing-indicator">Chatbot is typing...</div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type a message..." autocomplete="off">
            <button onclick="sendMessage()">Send</button>
            <button class="mic-button" onclick="startListening()">üéôÔ∏è</button>
        </div>
    </div>

    <script src="https://unpkg.com/compromise@13.11.0/builds/compromise.min.js"></script>
    <script>
        const intents = [
            { tag: "Welcome", patterns: ["Hi", "Hello", "Good Morning", "What's up?","Hey","Heya"], responses: ["Hello! Hope you are having a good day.", "Hi there! How can I assist you today?"] },
            { tag: "Ebook", patterns: ["Ebook", "Book", "notes"], responses: ["Go to Home->Bottom Left->Click on notes"] },
            { tag: "VideoLectures", patterns: ["Video", "Video Lecture","Videos","Vdo","video","videos","lecture","lectures"], responses: ["Go to Home->Bottom Left->Click Video Material"] },
            { tag: "goodbye", patterns: ["Goodbye", "See you later"], responses: ["Goodbye! Thanks for visiting.", "See you later! Have a great day."] },
            { tag: "thanks", patterns: ["Thanks", "Thank you"], responses: ["You're welcome!", "Happy to assist!"] },
            { tag: "Help", patterns: ["Can you help me?", "I need assistance"], responses: ["Sure, I'm here to help!", "Of course!"] },
            { tag: "Routine", patterns: ["Routine", "Time Table","time table","timetable","routine"], responses: ["Go to Home->Bottom Left-> Click on Routine"] }
    

        ];

        function sendMessage() {
            const userInput = document.getElementById("user-input").value;
            if (userInput.trim() === "") return;

            const chatBox = document.getElementById("chat-box");
            const typingIndicator = document.getElementById("typing-indicator");
            
            // Add user message
            const userMessage = document.createElement("p");
            userMessage.className = "user-message";
            userMessage.textContent = userInput;
            chatBox.appendChild(userMessage);
            document.getElementById("user-input").value = "";
            chatBox.scrollTop = chatBox.scrollHeight;

            // Show typing indicator
            typingIndicator.style.display = "block";

            // Get bot response
            setTimeout(() => {
                typingIndicator.style.display = "none";
                const botResponse = getBotResponse(userInput);
                const botMessage = document.createElement("p");
                botMessage.className = "bot-message";
                botMessage.textContent = botResponse;
                chatBox.appendChild(botMessage);
                chatBox.scrollTop = chatBox.scrollHeight;
                
                // Speak the response
                speak(botResponse);
            }, 1500);
        }

        function getBotResponse(userInput) {
            // Use compromise.js to better understand input
            const doc = nlp(userInput);
            const cleanedInput = doc.text();
            for (let intent of intents) {
                for (let pattern of intent.patterns) {
                    if (cleanedInput.toLowerCase().includes(pattern.toLowerCase())) {
                        const responses = intent.responses;
                        return responses[Math.floor(Math.random() * responses.length)];
                    }
                }
            }
            return "I'm sorry, I didn't understand that. Can you clarify?";
        }

        function speak(text) {
            const speech = new SpeechSynthesisUtterance(text);
            speech.voice = speechSynthesis.getVoices().find(voice => voice.name === "Google US English") || speechSynthesis.getVoices()[0];
            window.speechSynthesis.speak(speech);
        }

        function startListening() {
            const recognition = new webkitSpeechRecognition();
            recognition.lang = 'en-US';
            recognition.interimResults = false;
            recognition.onresult = function(event) {
                const userInput = event.results[0][0].transcript;
                document.getElementById("user-input").value = userInput;
                sendMessage();
            };
            recognition.start();
        }
    </script>
</body>
</html>

